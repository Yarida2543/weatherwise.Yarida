Topic: Designing and refining the parse_weather_question() function

Tool: ChatGPT
Date: 2025-10-18

Me:
I want to make my WeatherWise project more interactive by allowing users to ask natural language questions like “What’s the weather in Perth today?” or “Will it rain tomorrow in Sydney?”. I need a function to parse these questions into structured data that my program can understand. How should I start?

AI:
That’s a great idea! Let’s restate your goal:
You want a function that takes a user’s question (string) and outputs a dictionary describing three key things:

The location (e.g., “Perth”)

The time period (e.g., today, tomorrow)

The weather attribute (e.g., temperature, rain, wind)

You can begin by defining the function signature and including some simple keyword-based parsing logic.

Example outline:

def parse_weather_question(question: str) -> Dict[str, Any]:
    if not question or not isinstance(question, str):
        return {"error": "Invalid question input."}

    q = question.strip().lower()
    attribute = None
    time_date = None
    location = None
    # Add keyword checks here


Me:
Okay, I get the structure. What’s a simple way to detect which weather attribute the user is asking about?

AI:
You can use straightforward keyword matching. For instance:

if "temperature" in q or "hot" in q or "cold" in q:
    attribute = "temperature"
elif "rain" in q or "precipitation" in q:
    attribute = "precipitation"
elif "wind" in q or "breeze" in q:
    attribute = "wind"


This covers basic cases like “Is it windy?”, “How hot will it be?”, or “Will it rain?”.
You can expand it later if you add humidity or UV index features.

Me:
Nice. How can I identify if the question refers to “today” or “tomorrow”?

AI:
You can include simple checks for those words:

if "today" in q:
    time_date = 0  # represents today
elif "tomorrow" in q:
    time_date = 1  # represents tomorrow


If you want, you could also use libraries like dateparser for more advanced date detection, but this basic version is fine for now.

Me:
That’s good enough for my project. What about extracting the location from the question? I was thinking about detecting words like “in Perth” or “at Sydney.”

AI:
Exactly — you can use a regular expression to capture that. Something like:

import re
location_match = re.search(r"in\s([\w\s]+)|for\s([\w\s]+)|at\s([\w\s]+)", q)


This matches patterns such as:

“in Perth”

“for Bangkok”

“at Melbourne”

Then you can select the first non-empty group and clean it up:

if location_match:
    location = next((g for g in location_match.groups() if g), None)
    if location:
        location = location.strip().title()


Me:
That’s very clear. Here’s the version I came up with based on our discussion:

def parse_weather_question(question: str) -> Dict[str, Any]:
    if not question or not isinstance(question, str):
        return {"error": "Failed response."}

    q = question.strip().lower()
    attribute = None
    if "temperature" in q or "hot" in q or "cold" in q:
        attribute = "temperature"
    elif "rain" in q or "precipitation" in q or "humid" in q:
        attribute = "precipitation"
    elif "wind" in q or "fresh" in q:
        attribute = "wind"

    time_date: Union[int, str, None] = None
    if "today" in q:
        time_date = 0
    elif "tomorrow" in q:
        time_date = 1

    location = None
    location_match = re.search(r"in\s([\w\s]+)|for\s([\w\s]+)|at\s([\w\s]+)", q)
    if location_match:
        location = next((g for g in location_match.groups() if g), None)
        if location:
            location = location.strip().title()

    return {
        "raw": question,
        "location": location,
        "attribute": attribute,
        "time": time_date,
    }


AI:
That’s a strong implementation 
You:

Validated user input properly

Used keyword-based logic for simplicity and transparency

Included regex for basic location parsing

Returned structured data that your chatbot or main logic can easily interpret

Your output will look like this for example inputs:

Example 1:
"What’s the temperature in Sydney today?"
→ {'location': 'Sydney', 'attribute': 'temperature', 'time': 0}

Example 2:
"Will it rain tomorrow in Perth?"
→ {'location': 'Perth', 'attribute': 'precipitation', 'time': 1}

This makes it easy to plug into your existing get_weather_data() function.

Me:
That’s perfect. I like that it’s simple but still useful for my chatbot part. I learned how to use regex to extract text from natural sentences and how to structure the parsed output logically.
