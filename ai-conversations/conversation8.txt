Topic: Building and refining the generate_weather_response() function

Tool: ChatGPT
Date: 2025-10-18

Me:
Now that my WeatherWise system can connect and process data, I want to generate natural language answers automatically. I already have parse_weather_question() to interpret user input and get_weather_data() to retrieve information. How can I make a function that combines these and lets the AI generate a natural sentence?

AI:
Nice — this is the final piece of your interactive system!
Let’s restate your goal:
You want a function that takes two inputs —

parsed_question (output of your NLP parser)

weather_data (dictionary from the API)
—and then generates a human-friendly response using the AI model.

Here’s what your function should do:

Validate both inputs for errors.

Build a weather context string containing the current and forecast information.

Combine that context with the user’s question to create a prompt.

Send the prompt to your AI model via get_response().

Return the AI’s generated answer.

Me:
Yes, that’s what I had in mind. How can I format the weather context so the AI understands the data clearly?

AI:
You can write the context like a mini weather report. For example:

weather_context = f"Weather data for {location}:\n"
if current:
    weather_context += f"Current conditions: Temperature {current.get('temp_C')}°C, Feels like {current.get('FeelsLike')}°C, Conditions: {current.get('weatherDescript', [{}])[0].get('description')}.\n"
if daily:
    weather_context += "Daily forecast:\n"
    for day in daily:
        weather_context += f"  {day.get('date')}: Max {day.get('maxtemperature')}°C, Min {day.get('mintemperature')}°C, Conditions: {day.get('weatherDescript', [{}])[0].get('value')}, Precipitation {day.get('totalPrecipitation')}mm.\n"


This structure gives the AI clear, factual context before it answers the question.

Me:
Got it. Should I include both “current” and “daily” data every time?

AI:
Yes, that’s a good practice — it helps the AI provide more complete answers.
If you have both, include them. If not, gracefully skip whichever part is missing.

Me:
Okay, here’s my first draft for generate_weather_response():

def generate_weather_response(parsed_question: Dict[str, Any], weather_data: Dict[str, Any]) -> str:
    if parsed_question.get("error"):
        return parsed_question["error"]
    if weather_data.get("error"):
        return weather_data["error"]

    location = weather_data.get("location") or parsed_question.get("location") or "the selected location"
    current = weather_data.get("current", {})
    daily = weather_data.get("daily", [])

    weather_context = f"Weather data for {location}:\n"
    if current:
        weather_context += f"Current conditions: Temperature: {current.get('temp_C')}°C, Feels like: {current.get('FeelsLike')}°C, Conditions: {current.get('weatherDescript', [{}])[0].get('description')}, Precipitation (last 3h): {current.get('precipi_MM')} millimeters, Wind Speed: {current.get('wind_speed')} km/h.\n"
    if daily:
        weather_context += "Daily forecast:\n"
        for day in daily:
            weather_context += f"  {day.get('date')}: Max Temp: {day.get('maxtemperature')}°C, Min Temp: {day.get('mintemperature')}°C, Conditions: {day.get('weatherDescript', [{}])[0].get('value')}, Precipitation: {day.get('totalPrecipitation')} millimeters.\n"

    user_question = parsed_question.get("raw", "Tell me about the weather.")
    ai_prompt = f"{weather_context}\nBased on this weather data, please answer the following question: {user_question}"

    try:
        ai_response = get_response(ai_prompt)
        return ai_response
    except Exception as e:
        return f"Error generating AI response: {e}"


AI:
Excellent!
Your implementation is clear, modular, and well-documented.
Here’s why it works well:

Input validation protects against bad data.

Weather context gives the AI rich structured input.

Dynamic prompting makes the response adaptive to any question.

Error handling ensures robustness if get_response() fails.

You can test it by simulating a conversation like this:

question = "Will it rain tomorrow in Perth?"
parsed = parse_weather_question(question)
weather = get_weather_data(parsed["location"])
answer = generate_weather_response(parsed, weather)
print(answer)


That should print an AI-generated natural sentence like:

“It looks like light showers are expected tomorrow in Perth, with a maximum temperature of 21°C.”

Me:
That’s amazing. I tested it, and the AI responded naturally using the context I provided. It even referenced specific temperatures from the forecast. This makes my WeatherWise project feel like a real intelligent weather assistant.
